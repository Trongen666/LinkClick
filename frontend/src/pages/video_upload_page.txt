import { useState, useRef } from 'react';
import { motion } from 'framer-motion';
import { 
  IoCloudUploadOutline, 
  IoTrashOutline, 
  IoCheckmarkCircleOutline,
  IoWarningOutline,
  IoPricetagsOutline,
  IoTextOutline,
  IoDocumentTextOutline
} from 'react-icons/io5';
import { videoApi } from '../../services/api';
import DashboardLayout from '../../components/layouts/DashboardLayout';

const VideoUploadPage = () => {
  const [file, setFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [progress, setProgress] = useState(0);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [tags, setTags] = useState('');
  const [uploadStatus, setUploadStatus] = useState(null); // null, 'uploading', 'success', 'error'
  const [errorMessage, setErrorMessage] = useState('');
  const fileInputRef = useRef(null);

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    
    if (selectedFile) {
      // Validate file type
      if (!selectedFile.type.startsWith('video/')) {
        setErrorMessage('Please select a valid video file.');
        return;
      }
      
      // Validate file size (limit to 500MB)
      if (selectedFile.size > 500 * 1024 * 1024) {
        setErrorMessage('Video size should be less than 500MB.');
        return;
      }
      
      setFile(selectedFile);
      setErrorMessage('');
      
      // Create video preview
      const videoUrl = URL.createObjectURL(selectedFile);
      setPreview(videoUrl);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      const droppedFile = e.dataTransfer.files[0];
      
      // Validate file type
      if (!droppedFile.type.startsWith('video/')) {
        setErrorMessage('Please drop a valid video file.');
        return;
      }
      
      // Validate file size (limit to 500MB)
      if (droppedFile.size > 500 * 1024 * 1024) {
        setErrorMessage('Video size should be less than 500MB.');
        return;
      }
      
      setFile(droppedFile);
      setErrorMessage('');
      
      // Create video preview
      const videoUrl = URL.createObjectURL(droppedFile);
      setPreview(videoUrl);
    }
  };

  const clearFile = () => {
    setFile(null);
    setPreview(null);
    setProgress(0);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const parseTags = (tagString) => {
    return tagString.split(',')
      .map(tag => tag.trim())
      .filter(tag => tag.length > 0);
  };

  const handleUpload = async () => {
    if (!file) {
      setErrorMessage('Please select a video file.');
      return;
    }
    
    if (!title.trim()) {
      setErrorMessage('Please enter a title for your video.');
      return;
    }
    
    try {
      setUploadStatus('uploading');
      setErrorMessage('');
      
      const formData = new FormData();
      formData.append('file', file);
      formData.append('title', title);
      formData.append('description', description);
      
      // Add tags if any
      const parsedTags = parseTags(tags);
      if (parsedTags.length > 0) {
        formData.append('tags', JSON.stringify(parsedTags));
      }
      
      await videoApi.uploadVideo(formData, (progressEvent) => {
        const percentCompleted = Math.round(
          (progressEvent.loaded * 100) / progressEvent.total
        );
        setProgress(percentCompleted);
      });
      
      setUploadStatus('success');
      
      // Reset form after successful upload
      setTimeout(() => {
        setTitle('');
        setDescription('');
        setTags('');
        clearFile();
        setUploadStatus(null);
      }, 3000);
      
    } catch (error) {
      setUploadStatus('error');
      setErrorMessage(error.response?.data?.detail || 'Failed to upload video. Please try again.');
    }
  };

  return (
    <DashboardLayout>
      <div className="max-w-5xl mx-auto px-4 py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-3xl font-bold text-white mb-2">Upload Video</h1>
          <p className="text-gray-400">Share your content with the world</p>
        </motion.div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Video Upload Area */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="bg-gray-900/50 backdrop-blur-lg border border-gray-800 rounded-2xl p-6"
          >
            {!file ? (
              <div
                onDragOver={handleDragOver}
                onDrop={handleDrop}
                className="border-2 border-dashed border-gray-700 rounded-xl h-64 flex flex-col items-center justify-center cursor-pointer hover:border-blue-500 transition-colors"
                onClick={() => fileInputRef.current?.click()}
              >
                <IoCloudUploadOutline className="text-5xl text-gray-500 mb-4" />
                <p className="text-gray-400 mb-2">Drag and drop your video here</p>
                <p className="text-gray-500 text-sm">or</p>
                <button className="mt-4 px-4 py-2 bg-blue-600 hover:bg-blue-500 rounded-lg text-white text-sm">
                  Select Video
                </button>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="video/*"
                  onChange={handleFileChange}
                  className="hidden"
                />
                <p className="text-gray-500 text-xs mt-4">Max file size: 500MB</p>
              </div>
            ) : (
              <div className="relative">
                <video
                  src={preview}
                  controls
                  className="w-full h-64 object-cover rounded-xl"
                />
                <button
                  onClick={clearFile}
                  className="absolute top-4 right-4 bg-red-500/80 hover:bg-red-500 p-2 rounded-full"
                >
                  <IoTrashOutline className="text-white" />
                </button>
                <div className="mt-4">
                  <p className="text-gray-300 text-sm truncate">{file.name}</p>
                  <p className="text-gray-500 text-xs">
                    {(file.size / (1024 * 1024)).toFixed(2)} MB
                  </p>
                </div>
              </div>
            )}
            
            {uploadStatus === 'uploading' && (
              <div className="mt-6">
                <div className="flex justify-between text-sm mb-1">
                  <span className="text-gray-400">Uploading...</span>
                  <span className="text-gray-400">{progress}%</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div
                    className="bg-blue-500 h-2 rounded-full transition-all"
                    style={{ width: `${progress}%` }}
                  ></div>
                </div>
              </div>
            )}
            
            {uploadStatus === 'success' && (
              <div className="mt-6 flex items-center text-green-500">
                <IoCheckmarkCircleOutline className="mr-2 text-xl" />
                <span>Video uploaded successfully!</span>
              </div>
            )}
            
            {uploadStatus === 'error' && (
              <div className="mt-6 flex items-center text-red-500">
                <IoWarningOutline className="mr-2 text-xl" />
                <span>{errorMessage}</span>
              </div>
            )}
          </motion.div>
          
          {/* Video Details */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="bg-gray-900/50 backdrop-blur-lg border border-gray-800 rounded-2xl p-6"
          >
            <h2 className="text-xl font-bold text-white mb-6">Video Details</h2>
            
            <div className="mb-6">
              <label className="block text-gray-400 text-sm mb-2 flex items-center">
                <IoTextOutline className="mr-2" />
                Title <span className="text-red-500 ml-1">*</span>
              </label>
              <input
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="w-full px-4 py-3 bg-gray-800 border border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-white"
                placeholder="Enter video title"
                maxLength={100}
              />
              <p className="text-right text-gray-500 text-xs mt-1">
                {title.length}/100
              </p>
            </div>
            
            <div className="mb-6">
              <label className="block text-gray-400 text-sm mb-2 flex items-center">
                <IoDocumentTextOutline className="mr-2" />
                Description
              </label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                className="w-full px-4 py-3 bg-gray-800 border border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-white h-32 resize-none"
                placeholder="Enter video description"
                maxLength={1000}
              ></textarea>
              <p className="text-right text-gray-500 text-xs mt-1">
                {description.length}/1000
              </p>
            </div>
            
            <div className="mb-8">
              <label className="block text-gray-400 text-sm mb-2 flex items-center">
                <IoPricetagsOutline className="mr-2" />
                Tags
              </label>
              <input
                type="text"
                value={tags}
                onChange={(e) => setTags(e.target.value)}
                className="w-full px-4 py-3 bg-gray-800 border border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-white"
                placeholder="Enter tags separated by commas"
              />
              <p className="text-gray-500 text-xs mt-1">
                Example: tech, tutorial, coding
              </p>
            </div>
            
            {errorMessage && !uploadStatus && (
              <div className="mb-4 text-red-500 text-sm">
                {errorMessage}
              </div>
            )}
            
            <button
              onClick={handleUpload}
              disabled={uploadStatus === 'uploading'}
              className={`w-full py-3 px-4 rounded-lg font-medium flex items-center justify-center ${
                uploadStatus === 'uploading'
                  ? 'bg-gray-700 text-gray-400 cursor-not-allowed'
                  : 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 text-white'
              }`}
            >
              {uploadStatus === 'uploading' ? (
                <>
                  <span className="inline-block w-5 h-5 border-2 border-gray-400 border-t-transparent rounded-full animate-spin mr-2"></span>
                  Uploading...
                </>
              ) : (
                <>
                  <IoCloudUploadOutline className="mr-2" />
                  Upload Video
                </>
              )}
            </button>
          </motion.div>
        </div>
      </div>
    </DashboardLayout>
  );